@book{PolskieTowarzystwoMatematyczne.1991,
abstract = {Imprint varies: Amsterdam : North-Holland, 1986-(1989); Amsterdam ; Washington : IOS Press, -1991.},
author = {{Polskie Towarzystwo Matematyczne.}, Yun and Muntz, Richard R. and Nijssen, Siegfried and Kok, Joost N.},
booktitle = {Fundamenta Informaticae},
issn = {0169-2968},
keywords = {a priori,canonical representation,enumeration tree,frequent subtree mining,subtree isomorphism},
number = {1-2},
pages = {161--198},
publisher = {PanÃÅstwowe Wydawn. Naukowe},
title = {{Annales Societatis Mathematicae Polonae. Series IV, Fundamenta informaticae.}},
url = {https://dl.acm.org/citation.cfm?id=1227182},
volume = {66},
year = {1991}
}
@book{InstituteofElectricalandElectronicsEngineers.1989,
abstract = {Title from IEEExplore homepage (viewed Jul. 13, 2000).},
author = {{Institute of Electrical and Electronics Engineers.} and {IEEE Computer Society.}},
issn = {2326-3865},
publisher = {Institute of Electrical and Electronics Engineers},
title = {{IEEE transactions on knowledge and data engineering.}},
year = {1989}
}
@book{InstituteofElectricalandElectronicsEngineers.1989a,
abstract = {Title from cover.},
author = {{Institute of Electrical and Electronics Engineers.} and {IEEE Computer Society.}},
issn = {1558-2191},
publisher = {Institute of Electrical and Electronics Engineers},
title = {{IEEE transactions on knowledge and data engineering.}},
year = {1989}
}
@book{InstituteofElectricalandElectronicsEngineers.1989b,
abstract = {Title from cover.},
author = {{Institute of Electrical and Electronics Engineers.} and {IEEE Computer Society.}},
issn = {1041-4347},
publisher = {Institute of Electrical and Electronics Engineers},
title = {{IEEE transactions on knowledge and data engineering.}},
year = {1989}
}
@article{Gan2003,
author = {Gan, H. H.},
doi = {10.1093/nar/gkg365},
issn = {13624962},
journal = {Nucleic Acids Research},
month = {jun},
number = {11},
pages = {2926--2943},
title = {{Exploring the repertoire of RNA secondary motifs using graph theory; implications for RNA design}},
url = {https://academic.oup.com/nar/article-lookup/doi/10.1093/nar/gkg365},
volume = {31},
year = {2003}
}
@article{Gan2004,
author = {Gan, H. H. and Fera, D. and Zorn, J. and Shiffeldrim, N. and Tang, M. and Laserson, U. and Kim, N. and Schlick, T.},
doi = {10.1093/bioinformatics/bth084},
issn = {1367-4803},
journal = {Bioinformatics},
month = {may},
number = {8},
pages = {1285--1291},
title = {{RAG: RNA-As-Graphs database--concepts, analysis, and features}},
url = {https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/bth084},
volume = {20},
year = {2004}
}
@article{Wang2016,
author = {Wang, Yue and Wang, Hongzhi and Li, Jianzhong and Gao, Hong},
doi = {10.1007/s11704-015-4505-3},
issn = {2095-2228},
journal = {Frontiers of Computer Science},
month = {apr},
number = {2},
pages = {317--329},
title = {{Efficient graph similarity join for information integration on graphs}},
url = {http://link.springer.com/10.1007/s11704-015-4505-3},
volume = {10},
year = {2016}
}
@article{Zhao2008,
author = {Zhao, Peixiang and Yu, Jeffrey Xu},
doi = {10.1007/s11280-007-0031-z},
issn = {1386-145X},
journal = {World Wide Web},
month = {mar},
number = {1},
pages = {71--92},
title = {{Fast Frequent Free Tree Mining in Graph Databases}},
url = {http://link.springer.com/10.1007/s11280-007-0031-z},
volume = {11},
year = {2008}
}
@article{Bui2015,
author = {Bui, Dang Bach and Hadzic, Fedja and Tagarelli, Andrea and Hecker, Michael},
doi = {10.1007/s10844-014-0312-9},
issn = {0925-9902},
journal = {Journal of Intelligent Information Systems},
month = {dec},
number = {3},
pages = {397--421},
title = {{Evaluation of an associative classifier based on position-constrained frequent/closed subtree mining}},
url = {http://link.springer.com/10.1007/s10844-014-0312-9},
volume = {45},
year = {2015}
}
@article{Bonchi2013,
author = {Bonchi, Francesco and Castillo, Carlos and Ienco, Dino},
doi = {10.1007/s10844-011-0181-4},
issn = {0925-9902},
journal = {Journal of Intelligent Information Systems},
month = {apr},
number = {2},
pages = {211--239},
title = {{Meme ranking to maximize posts virality in microblogging platforms}},
url = {http://link.springer.com/10.1007/s10844-011-0181-4},
volume = {40},
year = {2013}
}
@article{Jimenez2011,
author = {Jim{\'{e}}nez, A{\'{i}}da and Molina-Solana, Miguel and Berzal, Fernando and Fajardo, Waldo},
doi = {10.1007/s10844-010-0122-7},
issn = {0925-9902},
journal = {Journal of Intelligent Information Systems},
month = {feb},
number = {1},
pages = {99--115},
title = {{Mining transposed motifs in music}},
url = {http://link.springer.com/10.1007/s10844-010-0122-7},
volume = {36},
year = {2011}
}
@article{HaghirChehreghani2016,
author = {{Haghir Chehreghani}, Mostafa and Bruynooghe, Maurice},
doi = {10.1007/s10618-015-0439-5},
issn = {1384-5810},
journal = {Data Mining and Knowledge Discovery},
month = {sep},
number = {5},
pages = {1249--1272},
title = {{Mining rooted ordered trees under subtree homeomorphism}},
url = {http://link.springer.com/10.1007/s10618-015-0439-5},
volume = {30},
year = {2016}
}
@article{Jung2006,
author = {Jung, Jason J.},
doi = {10.1007/s10791-006-9013-5},
issn = {1386-4564},
journal = {Information Retrieval},
month = {nov},
number = {1},
pages = {85--109},
title = {{Ontological framework based on contextual mediation for collaborative information retrieval}},
url = {http://link.springer.com/10.1007/s10791-006-9013-5},
volume = {10},
year = {2006}
}
@article{Severyn2012,
author = {Severyn, Aliaksei and Moschitti, Alessandro},
doi = {10.1007/s10618-012-0276-8},
issn = {1384-5810},
journal = {Data Mining and Knowledge Discovery},
month = {sep},
number = {2},
pages = {325--357},
title = {{Fast support vector machines for convolution tree kernels}},
url = {http://link.springer.com/10.1007/s10618-012-0276-8},
volume = {25},
year = {2012}
}
@article{Jimenez2012,
author = {Jim{\'{e}}nez, A{\'{i}}da and Berzal, Fernando and Cubero, Juan-Carlos},
doi = {10.1007/s10618-011-0218-x},
issn = {1384-5810},
journal = {Data Mining and Knowledge Discovery},
month = {jan},
number = {1},
pages = {1--39},
title = {{Using trees to mine multirelational databases}},
url = {http://link.springer.com/10.1007/s10618-011-0218-x},
volume = {24},
year = {2012}
}
@article{Chaoji2008,
author = {Chaoji, Vineet and {Al Hasan}, Mohammad and Salem, Saeed and Zaki, Mohammed J.},
doi = {10.1007/s10618-008-0098-x},
issn = {1384-5810},
journal = {Data Mining and Knowledge Discovery},
month = {dec},
number = {3},
pages = {457--495},
title = {{An integrated, generic approach to pattern mining: data mining template library}},
url = {http://link.springer.com/10.1007/s10618-008-0098-x},
volume = {17},
year = {2008}
}
@article{Pasquier2016,
author = {Pasquier, Claude and Sanhes, J{\'{e}}r{\'{e}}my and Flouvat, Fr{\'{e}}d{\'{e}}ric and Selmaoui-Folcher, Nazha},
doi = {10.1007/s10115-015-0831-x},
issn = {0219-1377},
journal = {Knowledge and Information Systems},
month = {mar},
number = {3},
pages = {491--514},
title = {{Frequent pattern mining in attributed trees: algorithms and applications}},
url = {http://link.springer.com/10.1007/s10115-015-0831-x},
volume = {46},
year = {2016}
}
@article{Deepak2014,
author = {Deepak, Akshay and Fern{\'{a}}ndez-Baca, David and Tirthapura, Srikanta and Sanderson, Michael J. and McMahon, Michelle M.},
doi = {10.1007/s10115-013-0676-0},
issn = {0219-1377},
journal = {Knowledge and Information Systems},
month = {dec},
number = {3},
pages = {559--590},
title = {{EvoMiner: frequent subtree mining in phylogenetic databases}},
url = {http://link.springer.com/10.1007/s10115-013-0676-0},
volume = {41},
year = {2014}
}
@article{Abbas2012,
author = {Abbas, Safia and Sawamura, Hajime},
doi = {10.1007/s10115-010-0371-3},
issn = {0219-1377},
journal = {Knowledge and Information Systems},
month = {jan},
number = {1},
pages = {213--246},
title = {{Argument mining based on a structured database and its usage in an intelligent tutoring environment}},
url = {http://link.springer.com/10.1007/s10115-010-0371-3},
volume = {30},
year = {2012}
}
@article{Jimenez2010,
author = {Jim{\'{e}}nez, A{\'{i}}da and Berzal, Fernando and Cubero, Juan-Carlos},
doi = {10.1007/s10115-009-0213-3},
issn = {0219-1377},
journal = {Knowledge and Information Systems},
month = {may},
number = {2},
pages = {199--224},
title = {{POTMiner: mining ordered, unordered, and partially-ordered trees}},
url = {http://link.springer.com/10.1007/s10115-009-0213-3},
volume = {23},
year = {2010}
}
@incollection{Hadzic2012,
author = {Hadzic, Fedja},
doi = {10.1007/978-3-642-28320-8_19},
pages = {221--233},
title = {{A Structure Preserving Flat Data Format Representation for Tree-Structured Data}},
url = {http://link.springer.com/10.1007/978-3-642-28320-8{\_}19},
year = {2012}
}
@incollection{Hadzic2011,
author = {Hadzic, Fedja and Hecker, Michael and Tagarelli, Andrea},
doi = {10.1007/978-3-642-25856-5_30},
pages = {403--416},
title = {{XML Document Clustering Using Structure-Preserving Flat Representation of XML Content and Structure}},
url = {http://link.springer.com/10.1007/978-3-642-25856-5{\_}30},
year = {2011}
}
@incollection{Wang2010,
author = {Wang, Xiaoling and Ester, Martin and Qian, Weining and Zhou, Aoying},
doi = {10.1007/978-3-642-17616-6_40},
pages = {442--455},
title = {{A Data Mining Approach to XML Dissemination}},
url = {http://link.springer.com/10.1007/978-3-642-17616-6{\_}40},
year = {2010}
}
@incollection{Jimenez2011a,
author = {Jim{\'{e}}nez, A{\'{i}}da and Berzal, Fernando and Cubero, Juan-Carlos},
doi = {10.1007/978-3-642-25856-5_13},
pages = {166--179},
title = {{Mining Patterns from Longitudinal Studies}},
url = {http://link.springer.com/10.1007/978-3-642-25856-5{\_}13},
year = {2011}
}
@incollection{Jimenez2009,
author = {Jim{\'{e}}nez, A{\'{i}}da and Berzal, Fernando and Cubero, Juan-Carlos},
doi = {10.1007/978-3-642-04125-9_5},
pages = {15--24},
title = {{Frequent Itemset Mining in Multirelational Databases}},
url = {http://link.springer.com/10.1007/978-3-642-04125-9{\_}5},
year = {2009}
}
@incollection{Okada2007,
author = {Okada, Masashi and Ishii, Naohiro and Kato, Nariaki},
doi = {10.1007/978-3-540-74827-4_131},
pages = {1051--1058},
title = {{Information Extraction by XLM}},
url = {http://link.springer.com/10.1007/978-3-540-74827-4{\_}131},
year = {2007}
}
@incollection{Hong2017,
author = {Hong, Eunpyeong and Kobayashi, Yasuaki and Yamamoto, Akihiro},
doi = {10.1007/978-3-319-71147-8_4},
pages = {45--60},
title = {{Improved Methods for Computing Distances Between Unordered Trees Using Integer Programming}},
url = {http://link.springer.com/10.1007/978-3-319-71147-8{\_}4},
year = {2017}
}
@incollection{Piernik2017,
author = {Piernik, Maciej and Morzy, Tadeusz},
doi = {10.1007/978-3-319-57529-2_17},
pages = {208--219},
title = {{Partial Tree-Edit Distance: A Solution to the Default Class Problem in Pattern-Based Tree Classification}},
url = {http://link.springer.com/10.1007/978-3-319-57529-2{\_}17},
year = {2017}
}
@incollection{Wu2017,
author = {Wu, Xiaoying and Theodoratos, Dimitri},
doi = {10.1007/978-3-319-55753-3_18},
pages = {279--294},
title = {{Efficiently Discovering Most-Specific Mixed Patterns from Large Data Trees}},
url = {http://link.springer.com/10.1007/978-3-319-55753-3{\_}18},
year = {2017}
}
@incollection{HaghirChehreghani2016a,
author = {{Haghir Chehreghani}, Mostafa and {Haghir Chehreghani}, Morteza},
doi = {10.1007/978-3-319-46128-1_12},
pages = {182--198},
title = {{Transactional Tree Mining}},
url = {http://link.springer.com/10.1007/978-3-319-46128-1{\_}12},
year = {2016}
}
@incollection{Klee2015,
author = {Klee, Steven D. and Gemignani, Guglielmo and Nardi, Daniele and Veloso, Manuela},
doi = {10.1007/978-3-319-24309-2_30},
pages = {397--409},
title = {{Graph-Based Task Libraries for Robots: Generalization and Autocompletion}},
url = {http://link.springer.com/10.1007/978-3-319-24309-2{\_}30},
year = {2015}
}
@article{Narouei2015,
author = {Narouei, Masoud and Ahmadi, Mansour and Giacinto, Giorgio and Takabi, Hassan and Sami, Ashkan},
doi = {10.1002/sec.1255},
issn = {19390114},
journal = {Security and Communication Networks},
month = {dec},
number = {18},
pages = {3311--3322},
title = {{DLLMiner: structural mining for malware detection}},
url = {http://doi.wiley.com/10.1002/sec.1255},
volume = {8},
year = {2015}
}
@article{Bhuiyan2016,
author = {Bhuiyan, Mansurul and Hasan, Mohammad Al},
doi = {10.1002/sam.11322},
issn = {19321864},
journal = {Statistical Analysis and Data Mining: The ASA Data Science Journal},
month = {aug},
number = {4},
pages = {205--229},
title = {{Interactive knowledge discovery from hidden data through sampling of frequent patterns}},
url = {http://doi.wiley.com/10.1002/sam.11322},
volume = {9},
year = {2016}
}
@article{DeCalmes2007,
author = {{De Calm{\`{e}}s}, Martine and Prade, Henri and S{\`{e}}des, Florence},
doi = {10.1002/int.20225},
issn = {08848173},
journal = {International Journal of Intelligent Systems},
month = {jul},
number = {7},
pages = {723--737},
title = {{Flexible querying of semistructured data: A fuzzy-set-based approach}},
url = {http://doi.wiley.com/10.1002/int.20225},
volume = {22},
year = {2007}
}
@article{Rupp2010,
author = {Rupp, Matthias and Schneider, Gisbert},
doi = {10.1002/minf.200900080},
issn = {18681743},
journal = {Molecular Informatics},
month = {apr},
number = {4},
pages = {266--273},
title = {{Graph Kernels for Molecular Similarity}},
url = {http://doi.wiley.com/10.1002/minf.200900080},
volume = {29},
year = {2010}
}
@incollection{Rupp2012,
address = {Hoboken, NJ, USA},
author = {Rupp, Matthias},
booktitle = {Statistical and Machine Learning Approaches for Network Analysis},
doi = {10.1002/9781118346990.ch8},
month = {jun},
pages = {217--243},
publisher = {John Wiley {\&} Sons, Inc.},
title = {{Graph Kernels}},
url = {http://doi.wiley.com/10.1002/9781118346990.ch8},
year = {2012}
}
@article{Brown1999,
author = {Brown, J. W.},
doi = {10.1093/nar/27.1.314},
issn = {0305-1048},
journal = {Nucleic Acids Research},
month = {jan},
number = {1},
pages = {314--314},
title = {{The Ribonuclease P Database}},
url = {https://academic.oup.com/nar/article-lookup/doi/10.1093/nar/27.1.314},
volume = {27},
year = {1999}
}
@incollection{Asai2003,
author = {Asai, Tatsuya and Arimura, Hiroki and Uno, Takeaki and Nakano, Shin-ichi},
doi = {10.1007/978-3-540-39644-4_6},
pages = {47--61},
title = {{Discovering Frequent Substructures in Large Unordered Trees}},
url = {http://link.springer.com/10.1007/978-3-540-39644-4{\_}6},
year = {2003}
}
@incollection{Asai2002,
address = {Philadelphia, PA},
author = {Asai, Tatsuya and Abe, Kenji and Kawasoe, Shinji and Arimura, Hiroki and Sakamoto, Hiroshi and Arikawa, Setsuo},
booktitle = {Proceedings of the 2002 SIAM International Conference on Data Mining},
doi = {10.1137/1.9781611972726.10},
month = {apr},
pages = {158--174},
publisher = {Society for Industrial and Applied Mathematics},
title = {{Efficient Substructure Discovery from Large Semi-structured Data}},
url = {http://epubs.siam.org/doi/abs/10.1137/1.9781611972726.10},
year = {2002}
}
@article{Zhang2001,
author = {Zhang, Chun and Naughton, Jeffrey and DeWitt, David and Luo, Qiong and Lohman, Guy},
doi = {10.1145/376284.375722},
issn = {01635808},
journal = {ACM SIGMOD Record},
month = {jun},
number = {2},
pages = {425--436},
title = {{On supporting containment queries in relational database management systems}},
url = {http://portal.acm.org/citation.cfm?doid=376284.375722},
volume = {30},
year = {2001}
}
@article{Zaki2006,
author = {Zaki, Mohammed J. and Aggarwal, Charu C.},
doi = {10.1007/s10994-006-5832-2},
issn = {0885-6125},
journal = {Machine Learning},
month = {feb},
number = {1-2},
pages = {137--170},
title = {{XRules: An effective algorithm for structural classification of XML data}},
url = {http://link.springer.com/10.1007/s10994-006-5832-2},
volume = {62},
year = {2006}
}
@inproceedings{Zaki2002,
address = {New York, New York, USA},
author = {Zaki, Mohammed J.},
booktitle = {Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining  - KDD '02},
doi = {10.1145/775056.775058},
isbn = {158113567X},
pages = {71},
publisher = {ACM Press},
title = {{Efficiently mining frequent trees in a forest}},
url = {http://portal.acm.org/citation.cfm?doid=775047.775058},
year = {2002}
}
@article{Yoshida1995,
author = {Yoshida, Ken'ichi and Motoda, Hiroshi},
doi = {10.1016/0004-3702(94)00066-A},
issn = {00043702},
journal = {Artificial Intelligence},
month = {may},
number = {1},
pages = {63--92},
title = {{CLIP: concept learning from inference patterns}},
url = {http://linkinghub.elsevier.com/retrieve/pii/000437029400066A},
volume = {75},
year = {1995}
}
@inproceedings{Wang1998,
address = {New York, New York, USA},
author = {Wang, Ke and Liu, Huiqing},
booktitle = {Proceedings of the 21st annual international ACM SIGIR conference on Research and development in information retrieval  - SIGIR '98},
doi = {10.1145/290941.290982},
isbn = {1581130155},
pages = {146--154},
publisher = {ACM Press},
title = {{Discovering typical structures of documents}},
url = {http://portal.acm.org/citation.cfm?doid=290941.290982},
year = {1998}
}
@article{Shapiro1990,
author = {Shapiro, Bruce A. and Zhang, Kaizhong},
doi = {10.1093/bioinformatics/6.4.309},
issn = {1367-4803},
journal = {Bioinformatics},
number = {4},
pages = {309--318},
title = {{Comparing multiple RNA secondary structures using tree comparisons}},
url = {https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/6.4.309},
volume = {6},
year = {1990}
}
@article{Shamir1999,
author = {Shamir, Ron and Tsur, Dekel},
doi = {10.1006/jagm.1999.1044},
issn = {01966774},
journal = {Journal of Algorithms},
month = {nov},
number = {2},
pages = {267--280},
title = {{Faster Subtree Isomorphism}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0196677499910441},
volume = {33},
year = {1999}
}
@inproceedings{Ruckert2004,
address = {New York, New York, USA},
author = {R{\"{u}}ckert, Ulrich and Kramer, Stefan},
booktitle = {Proceedings of the 2004 ACM symposium on Applied computing  - SAC '04},
doi = {10.1145/967900.968018},
isbn = {1581138121},
pages = {564},
publisher = {ACM Press},
title = {{Frequent free tree discovery in graph data}},
url = {http://portal.acm.org/citation.cfm?doid=967900.968018},
year = {2004}
}
@inproceedings{Nijssen2004,
address = {New York, New York, USA},
author = {Nijssen, Siegfried and Kok, Joost N.},
booktitle = {Proceedings of the 2004 ACM SIGKDD international conference on Knowledge discovery and data mining  - KDD '04},
doi = {10.1145/1014052.1014134},
isbn = {1581138889},
pages = {647},
publisher = {ACM Press},
title = {{A quickstart in frequent structure mining can make a difference}},
url = {http://portal.acm.org/citation.cfm?doid=1014052.1014134},
year = {2004}
}
@article{Morell1996,
author = {Morell, V.},
doi = {10.1126/science.273.5275.568},
issn = {0036-8075},
journal = {Science},
month = {aug},
number = {5275},
pages = {568--570},
title = {{Evolutionary Biology: Web-Crawling Up the Tree of Life}},
url = {http://www.sciencemag.org/cgi/doi/10.1126/science.273.5275.568},
volume = {273},
year = {1996}
}
@inproceedings{Kramer2001,
address = {New York, New York, USA},
author = {Kramer, Stefan and {De Raedt}, Luc and Helma, Christoph},
booktitle = {Proceedings of the seventh ACM SIGKDD international conference on Knowledge discovery and data mining  - KDD '01},
doi = {10.1145/502512.502533},
isbn = {158113391X},
pages = {136--143},
publisher = {ACM Press},
title = {{Molecular feature mining in HIV data}},
url = {http://portal.acm.org/citation.cfm?doid=502512.502533},
year = {2001}
}
@article{Kilpelainen1995,
author = {Kilpel{\"{a}}inen, Pekka and Mannila, Heikki},
doi = {10.1137/S0097539791218202},
issn = {0097-5397},
journal = {SIAM Journal on Computing},
month = {apr},
number = {2},
pages = {340--356},
title = {{Ordered and Unordered Tree Inclusion}},
url = {http://epubs.siam.org/doi/10.1137/S0097539791218202},
volume = {24},
year = {1995}
}
@article{Zaki2005,
author = {Zaki, M.J.},
doi = {10.1109/TKDE.2005.125},
issn = {1041-4347},
journal = {IEEE Transactions on Knowledge and Data Engineering},
month = {aug},
number = {8},
pages = {1021--1035},
title = {{Efficiently mining frequent trees in a forest: algorithms and applications}},
url = {http://ieeexplore.ieee.org/document/1458697/},
volume = {17},
year = {2005}
}
@book{Baxter1999,
author = {Baxter, Ira D. and Yahin, Andrew and Moura, Leonardo and Sant'Anna, Marcelo and Bier, Lorraine},
booktitle = {Proceedings of the International Conference on Software Maintenance},
isbn = {0818687797},
keywords = {Design Maintenance System,Software maintenance,clone detection,software evaluation},
pages = {400},
publisher = {IEEE Computer Society Press},
title = {{International Conference on Software Maintenance.}},
url = {https://dl.acm.org/citation.cfm?id=853341},
year = {1999}
}
@article{Baxter1998,
author = {Baxter, Ira D. and Baxter, Ira D. and Yahin, Andrew and Moura, Leonardo and Anna, Marcelo Sant' and Bier, Lorraine},
title = {{Clone Detection Using Abstract Syntax Trees}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.9928},
year = {1998}
}
@article{Kontogiannis1996,
author = {Kontogiannis, K. A. and Demori, R. and Merlo, E. and Galler, M. and Bernstein, M.},
doi = {10.1007/BF00126960},
issn = {0928-8910},
journal = {Automated Software Engineering},
month = {jun},
number = {1-2},
pages = {77--108},
publisher = {Kluwer Academic Publishers},
title = {{Pattern matching for clone and concept detection}},
url = {http://link.springer.com/10.1007/BF00126960},
volume = {3},
year = {1996}
}
@techreport{Komondoor,
abstract = {Programs often have a lot of duplicated code, which makes both understanding and maintenance more difficult. This problem can be alleviated by detecting duplicated code, extracting it into a separate new procedure, and replacing all the clones (the instances of the duplicated code) by calls to the new procedure. This paper describes the design and initial implementation of a tool that finds clones and displays them to the programmer. The novel aspect of our approach is the use of program dependence graphs (PDGs) and program slicing to find isomorphic PDG subgraphs that represent clones. The key benefits of this approach are that our tool can find non-contiguous clones (clones whose components do not occur as contiguous text in the program), clones in which matching statements have been reordered, and clones that are intertwined with each other. Furthermore, the clones that are found are likely to be meaningful computations, and thus good candidates for extraction.},
author = {Komondoor, Raghavan and Horwitz, Susan},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Komondoor, Horwitz - Unknown - Using Slicing to Identify Duplication in Source Code.pdf:pdf},
title = {{Using Slicing to Identify Duplication in Source Code}},
url = {http://research.cs.wisc.edu/wpis/papers/sas01.pdf}
}
@incollection{Cheung2003,
author = {Cheung, Warren and Evans, William and Moses, Jeremy},
doi = {10.1007/978-3-540-39920-9_3},
pages = {17--32},
publisher = {Springer, Berlin, Heidelberg},
title = {{Predicated Instructions for Code Compaction}},
url = {http://link.springer.com/10.1007/978-3-540-39920-9{\_}3},
year = {2003}
}
@article{Baker1997,
author = {Baker, Brenda S. and S., Brenda},
doi = {10.1137/S0097539793246707},
issn = {0097-5397},
journal = {SIAM Journal on Computing},
keywords = {duplication,pattern matching,string matching},
month = {oct},
number = {5},
pages = {1343--1362},
publisher = {Society for Industrial and Applied Mathematics},
title = {{Parameterized Duplication in Strings: Algorithms and an Application to Software Maintenance}},
url = {http://epubs.siam.org/doi/10.1137/S0097539793246707},
volume = {26},
year = {1997}
}
@incollection{Ammaev2017,
author = {Ammaev, S. G. and Gervich, L. R. and Steinberg, B. Y.},
doi = {10.1007/978-3-319-62932-2_24},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ammaev, Gervich, Steinberg - 2017 - Combining Parallelization with Overlaps and Optimization of Cache Memory Usage.pdf:pdf},
pages = {257--264},
publisher = {Springer, Cham},
title = {{Combining Parallelization with Overlaps andOptimization of Cache Memory Usage}},
url = {http://link.springer.com/10.1007/978-3-319-62932-2{\_}24},
year = {2017}
}
@incollection{Levchenko2017,
author = {Levchenko, Vadim and Perepelkina, Anastasia},
doi = {10.1007/978-3-319-62932-2_11},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Levchenko, Perepelkina - 2017 - The DiamondTetris Algorithm for Maximum Performance Vectorized Stencil Computation.pdf:pdf},
pages = {124--135},
publisher = {Springer, Cham},
title = {{The DiamondTetris Algorithm for Maximum Performance Vectorized Stencil Computation}},
url = {http://link.springer.com/10.1007/978-3-319-62932-2{\_}11},
year = {2017}
}
@misc{,
title = {{Intel{\textregistered} VTune‚Ñ¢ Amplifier | Intel{\textregistered} Software}},
url = {https://software.intel.com/en-us/intel-vtune-amplifier-xe},
urldate = {2018-08-20}
}
@book{Kaspersky2003,
abstract = {Includes index. Annotation A guide to optimizing programs on the PC and Unix platforms, this book covers the expediency of optimization and the methods to increase the speed of programs via optimization. Discussed are typical mistakes made by programmers that lessen the performance of the system along with easily implemented solutions. Detailed descriptions of the devices and mechanism of interaction of the computer components, effective ways of programming, and a technique for optimizing programs are provided. Programmers will also learn how to effectively implement programming methods in a high-level language that is usually done in assembler with particular attention given to the RAM subsystem. The working principles of the RAM and the way in which it is coupled with the processor as well as a description of programming methods that allows programmers to overclock the memory to reach maximum performance are included.},
author = {Kaspersky, Kris.},
isbn = {1931769249},
pages = {389},
publisher = {A-LIST, LLC},
title = {{Code optimization : effective memory usage}},
url = {https://books.google.ru/books/about/Code{\_}Optimization.html?id=nx7BOCk83AIC{\&}redir{\_}esc=y},
year = {2003}
}
@inproceedings{Regehr2012,
address = {New York, New York, USA},
author = {Regehr, John and Chen, Yang and Cuoq, Pascal and Eide, Eric and Ellison, Chucky and Yang, Xuejun and Regehr, John and Chen, Yang and Cuoq, Pascal and Eide, Eric and Ellison, Chucky and Yang, Xuejun},
booktitle = {Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation - PLDI '12},
doi = {10.1145/2254064.2254104},
isbn = {9781450312059},
issn = {0362-1340},
keywords = {automated testing,bug reporting,compiler defect,compiler testing,random testing,test-case minimization},
number = {6},
pages = {335},
publisher = {ACM Press},
title = {{Test-case reduction for C compiler bugs}},
url = {http://dl.acm.org/citation.cfm?doid=2254064.2254104},
volume = {47},
year = {2012}
}
@techreport{Misherghi2006,
abstract = {Inputs causing a program to fail are usually large and often contain information irrelevant to the failure. It thus helps debugging to simplify program inputs. The Delta Debugging algorithm is a general technique applicable to minimizing all failure-inducing inputs for more effective debugging. In this paper, we present HDD, a simple but effective algorithm that significantly speeds up Delta Debugging and increases its output quality on tree structured inputs such as XML. Instead of treating the inputs as one flat atomic list, we apply Delta Debugging to the very structure of the data. In particular , we apply the original Delta Debugging algorithm to each level of a program's input, working from the coarsest to the finest levels. We are thus able to prune the large irrelevant portions of the input early. All the generated input configurations are syntactically valid, reducing the number of inconclusive configurations that need to be tested and accordingly the amount of time spent simplifying. We have implemented HDD and evaluated it on a number of real failure-inducing inputs from the GCC and Mozilla bugzilla databases. Our Hierarchical Delta Debugging algorithm produces simpler outputs and takes orders of magnitude fewer test cases than the original Delta Debugging algorithm. It is able to scale to inputs of considerable size that the original Delta Debugging algorithm cannot process in practice. We argue that HDD is an effective tool for automatic debugging of programs expecting structured inputs.},
author = {Misherghi, Ghassan and Su, Zhendong},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Misherghi, Su - 2006 - HDD Hierarchical Delta Debugging.pdf:pdf},
keywords = {D25[Software Engineer-ing]: Testing and Debugging-,Delta Debugging,Testing tools General Terms: Reliability Keywords:},
title = {{HDD: Hierarchical Delta Debugging}},
url = {https://www.eecs.northwestern.edu/{~}robby/courses/395-495-2009-fall/hdd.pdf},
year = {2006}
}
@inproceedings{Steinberg2016a,
address = {New York, New York, USA},
annote = {–ê.–ü. –ë–∞–≥–ª–∏–π, –î.–í.–î—É–±—Ä–æ–≤,–Æ.–í.–ú–∏—Ö–∞–π–ª—É—Ü,–ë.–Ø.–®—Ç–µ–π–Ω–±–µ—Ä–≥,–†.–ë.–®—Ç–µ–π–Ω–±–µ—Ä–≥Developing a High-Level Language Compiler for a Computer with Programmable Architecture.–¢—Ä—É–¥—ã –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏–ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏CEESECR-2016.CEE-SECR '16, October 28-29, 2016, Moscow, Russian Federation c 2016 ACM. ISBN 978-1-4503-4884-3/16/10. . {\$}15.00DOI:http://dx.doi.org/10.1145/3022211.3022226

ACM DL:http://dl.acm.org/citation.cfm?id=3022211},
author = {Steinberg, Boris Ya. and Bugliy, Anton P. and Dubrov, Denis V. and Mikhailuts, Yury V. and Steinberg, Roman B.},
booktitle = {Proceedings of the 12th Central and Eastern European Software Engineering Conference in Russia on - CEE-SECR '16},
doi = {10.1145/3022211.3022226},
isbn = {9781450348843},
keywords = {FPGA,HDL,MIPS,Reconfigurable computations,high-level internal representation,high-level synthesis,parallelizing compiler,pipeline computing},
pages = {1--6},
publisher = {ACM Press},
title = {{Developing a High-Level Language Compiler for a Computer with Programmable Architecture}},
url = {http://dl.acm.org/citation.cfm?doid=3022211.3022226},
year = {2016}
}
@techreport{Seely2017,
abstract = {For higher performance and long-term flexibility, the MicroBlaze soft processor core provides system developers with a uniquely powerful, extensible embedded design solution. ABSTRACT The Xilinx{\textregistered} MicroBlaze‚Ñ¢ IP core is a highly configurable 32-bit microprocessor optimized for the programmable logic in Xilinx FPGAs and SoCs. Seamlessly integrated into the Xilinx Vivado{\textregistered} design environment, power users can leverage the MicroBlaze processor to create a customized, high-performance, SoC-based system. Alternatively, Xilinx provides a pre-configured MicroBlaze core with the most-used microcontroller, real-time, and application software presets, enabling the designer to get started with software development right away using freely available evaluation PC boards. Initially designed over eighteen years ago, the MicroBlaze processor core boasts a stellar heritage, having proven itself across diverse applications for the industrial, medical, automotive, consumer, and communication markets, among others. Its rich feature set and high performance have evolved to offer a mainstream alternative to ARM{\textregistered} Cortex‚Ñ¢-M CPUs, with the added benefit of being fully integrable into the developer's custom logic design. The MicroBlaze processor core is included at no cost with all editions of the Vivado tools, and comes with Xilinx SDK, a full-featured software development environment.},
author = {Seely, Joel and Erusalagandi, Srikanth and Bethurem, Jayson},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Seely, Erusalagandi, Bethurem - 2017 - WP501 (v1.0) The MicroBlaze Soft Processor Flexibility and Performance for Cost-Sensitive Embedde.pdf:pdf},
keywords = {-7000,All Programmable,FPGA,IP,MicroBlaze{\&}trade,SoC,Zynq{\&}reg,programmable logic,soft IP core,time-to-market,time-to-revenue,wp501},
title = {{WP501 (v1.0) The MicroBlaze Soft Processor: Flexibility and Performance for Cost-Sensitive Embedded Designs}},
url = {www.xilinx.com1},
year = {2017}
}
@article{Corporaal1994,
abstract = {Transport triggered architectures (TTAs) form a super class of traditional very large instruction word (VLIW) architectures, in the sense that they not only exploit operation style parallelism, but also the parallelism available at data transport level. This is possible by making all transports visible to the compiler The main advantages of transport triggered architectures are its simplicity and flexibility, allowing short processor cycle times and a quick (application specific) processor design. Transport triggered architectures also have certain advantages with respect to scheduling freedom and transport utilization. The paper will discuss the concept of tranpsort triggering and its corresponding advantages. It further concentrates on a prototype VLSI implementation in a 1.6¬µ Sea of Gates technology, called MOVE32INT, which demonstrates the feasibility of transport triggering. Finally it explores the automatic generation of arbitary TTAs.},
author = {Corporaal, Henk},
doi = {10.1109/GLSV.1994.289981},
isbn = {0818656107},
issn = {10661395},
journal = {VLSI, 1994. Design Automation of High {\ldots}},
keywords = {Sea of Gates,VLIW,operation triggering,pipelining,transport triggering},
pages = {130--135},
publisher = {IEEE Comput. Soc. Press},
title = {{Design of transport triggered architectures}},
url = {http://ieeexplore.ieee.org/document/289981/ http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=289981},
year = {1994}
}
@inproceedings{Shippey2012,
author = {Shippey, T. and Bowes, D. and Chrisianson, B. and Hall, T.},
booktitle = {16th International Conference on Evaluation {\&} Assessment in Software Engineering (EASE 2012)},
doi = {10.1049/ic.2012.0035},
isbn = {978-1-84919-541-6},
pages = {274--278},
publisher = {IET},
title = {{A mapping study of software code cloning}},
url = {http://digital-library.theiet.org/content/conferences/10.1049/ic.2012.0035},
year = {2012}
}
@techreport{Nita2013,
abstract = {Noile tehnologii de proiectare a sistemelor cu chip multiprocesor bazate pe FPGA-uri ≈üi blocuri IP fac posibilƒÉ dezvoltarea unor dispozitive optimizate din punct de vedere al performan≈£elor, consumului de energie ≈üi al costului. Marea flexibilitate oferitƒÉ de aceste noi instrumente de proiectare permite explorarea spa≈£iului de proiectare pentru a cƒÉuta cele mai eficiente implementƒÉri. Astfel, {\^{i}}n aceastƒÉ lucrare, am realizat o cercetare {\^{i}}n domeniul acestor tehnologii ≈üi am propus un model de proiectare concurentƒÉ hardware/software (hw/sw co-design) pentru dezvoltarea aplica≈£iilor pe sisteme cu chip multiprocesor bazate pe FPGA IP cores. Rezultatele experimentale au fost validate pe o aplica≈£ie de filtrare a imaginilor, implementatƒÉ pe un sistem multiprocesor, folosind kitul de dezvoltare Xilinx XUP Virtex 5 ≈üi pachetul software Xilinx EDK. The new design technologies of multiprocessor systems on chip based on FPGAs and IP blocks, make possible the development of optimized devices in terms of performance, power consumption and cost. Flexibility offered by these new design tools allow design space exploration to search for the most effective implementations. Thus, in this paper, we performed a research on these technologies and we have proposed a hardware / software co-design model for developing applications on multiprocessor systems on chip based on FPGA IP cores. The experimental results were validated with an application for filtering images, implemented on a multiprocessor system using the development kit Xilinx XUP Virtex 5 and Xilinx EDK application software},
author = {Ni≈£ƒÉ, Iulian and Zdru, Gabriel},
booktitle = {U.P.B. Sci. Bull., Series C},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ni≈£ƒÉ, Zdru - 2013 - HW-SW CO-DESIGN OF MPSOC USING FGPA IP CORES.pdf:pdf},
keywords = {FPGA,MicroBlaze,Multiprocessor System on Chip,image filtering},
number = {1},
title = {{HW-SW CO-DESIGN OF MPSOC USING FGPA IP CORES}},
url = {https://www.scientificbulletin.upb.ro/rev{\_}docs{\_}arhiva/full980{\_}376186.pdf},
volume = {75},
year = {2013}
}
@misc{,
title = {{HW/SW Co-Design QPSK Transmit and Receive Using Analog Devices AD9361/AD9364 - MATLAB {\&} Simulink Example}},
url = {https://www.mathworks.com/help/supportpkg/xilinxzynqbasedradio/examples/hw-sw-co-design-qpsk-transmit-and-receive-using-analog-devices-ad9361-ad9364.html},
urldate = {2018-07-30}
}
@article{Hwu1989,
author = {Hwu, Ww and Chang, Pp},
doi = {10.1109/ISCA.1989.714559},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hwu, Chang - 1989 - Achieving high instruction cache performance with an optimizing compiler.pdf:pdf},
isbn = {0-8186-8948-X},
issn = {01497111},
journal = {ACM SIGARCH Computer Architecture News},
keywords = {a donation f,cache,compiler optimization,data locality,instruction placement,memory hierarchy,nsf,science fundation,supported by the national,this research has been,under grant mlp-8809478},
pages = {242--251},
title = {{Achieving high instruction cache performance with an optimizing compiler}},
url = {http://dl.acm.org/citation.cfm?id=74953},
year = {1989}
}
@article{Juergens2009,
abstract = {Code cloning is not only assumed to inflate maintenance costs but also considered defect-prone as inconsistent changes to code duplicates can lead to unexpected behavior. Consequently, the identification of duplicated code, clone detection, has been a very active area of research in recent years. Up to now, however, no substantial investigation of the consequences of code cloning on program correctness has been carried out. To remedy this shortcoming, this paper presents the results of a large-scale case study that was undertaken to find out if inconsistent changes to cloned code can indicate faults. For the analyzed commercial and open source systems we not only found that inconsistent changes to clones are very frequent but also identified a significant number of faults induced by such changes. The clone detection tool used in the case study implements a novel algorithm for the detection of inconsistent clones. It is available as open source to enable other researchers to use it as basis for further investigations.},
annote = {–£–ø–æ–º—è–Ω—É—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∫–ª–æ–Ω–æ–≤ —Å–æ –≤–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –í –æ—Å—Ç–∞–ª—å–Ω–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.},
archivePrefix = {arXiv},
arxivId = {1701.05472},
author = {Juergens, Elmar and Deissenboeck, Florian and Hummel, Benjamin and Wagner, Stefan},
doi = {10.1109/ICSE.2009.5070547},
eprint = {1701.05472},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Juergens et al. - 2009 - Do code clones matter.pdf:pdf},
isbn = {9781424434527},
issn = {02705257},
journal = {Proceedings - International Conference on Software Engineering},
pages = {485--495},
title = {{Do code clones matter?}},
year = {2009}
}
@article{Bondalapati2000,
abstract = {Lack of automatic mapping te chniques is a signific ant hurdle in obtaining high performanc e for gener al purpose computing on reconfigurable hardware. In this paper we develop techniques for mapping lo op computations from applic ations onto high p erformanc e pip eline dc on?g? ur ations? L op statements with gener o alize d dir cte e d acyclic gr aph dep en? dencies ar e mapp d onto multiple pip e eline se gments? Each pip eline se g? ment is exe cute d for a ?xe d numb er of iter ations b efor e the har dwar eis r c e on?gur d at runtime to exe e cute the next se gment? The r c e on?gur ation c ost is amortize d over the multiple iter ations of the exe cution of the lo op statements? This alleviates the b ottlene ck of high r c e on?gur ation over? he ads in curr ent ar chite ctur es? The p ap er describ es heuristic te chniques to c onstruct pip eline c on?gur ation s which have r duc d total exe e e cution time including the runtime r c e on?gur ation overhe ads? The p erformanc e b ene?ts which c an b e achieve d using our appr ach ar o e illustr ate d by map? ping example applic ation lo op onto Virtex series FPGA fr om Xilinx? ?},
author = {Bondalapati, Kiran and Prasanna, Viktor K and Angeles, Los},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bondalapati, Prasanna, Angeles - 2000 - Loop Pipelining and Optimization for Run Time Reconfiguration.pdf:pdf},
isbn = {354067442X},
issn = {03029743},
pages = {906--915},
title = {{Loop Pipelining and Optimization for Run Time Reconfiguration}},
year = {2000}
}
@inproceedings{1690049,
author = {Busonera, G and Carta, S and Marongiu, A and Raffo, L},
booktitle = {9th EUROMICRO Conference on Digital System Design (DSD'06)},
doi = {10.1109/DSD.2006.29},
keywords = {electronic engineering computing;field programmabl},
pages = {265--268},
title = {{Automatic Application Partitioning on FPGA/CPU Systems Based on Detailed Low-Level Information}},
year = {2006}
}
@article{Saul1999,
abstract = {A new codesign compiler, Dash, provides a co-synthesis and co-simulation environment for mixed FPGA/processor architectures. It compiles a C-like description to a solution containing both processors and custom hardware, and allows the descriptions of FPGA-based processors to be heavily parametrized. The user may add instructions to the processors, and the Dash software architecture allows the user to add facilities for targeting these extra instructions to the compiler. This system is being used to design a number of case studies, and a single-chip codesign of an Internet video game is used to illustrate the design flow.},
author = {Saul, J M},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Saul - 1999 - Hardwaresoftware codesign for FPGA-based systems.pdf:pdf},
isbn = {0769500013},
issn = {10603425},
journal = {Proceedings of the Hawaii International Conference on System Sciences},
keywords = {Computer architecture;Field programmable gate arra},
number = {c},
pages = {116 --},
title = {{Hardware/software codesign for FPGA-based systems}},
volume = {00},
year = {1999}
}
@misc{,
title = {{TCE - TTA-based co-design environment}},
url = {http://tce.cs.tut.fi/},
urldate = {2018-05-28},
year = {2018}
}
@inproceedings{Saul1999a,
abstract = {A new codesign compiler, Dash, provides a co-synthesis and co-simulation environment for mixed FPGA/processor architectures. It compiles a C-like description to a solution containing both processors and custom hardware, and allows the descriptions of FPGA-based processors to be heavily parametrized. The user may add instructions to the processors, and the Dash software architecture allows the user to add facilities for targeting these extra instructions to the compiler. This system is being used to design a number of case studies, and a single-chip codesign of an Internet video game is used to illustrate the design flow.},
author = {Saul, J.M. M},
booktitle = {Proceedings of the 32nd Annual Hawaii International Conference on Systems Sciences. 1999. HICSS-32.},
doi = {10.1109/HICSS.1999.772879},
issn = {10603425},
keywords = {Acceleration,Application software,C-like description,Computer architecture,Dash,Design automation,FPGA-based systems,Field programmable gate arrays,Hardware,Hip,Internet,Internet video game,Laboratories,Software systems,Software tools,case studies,circuit layout CAD,codesign compiler,computer games,cosimulation environment,cosynthesis environment,custom hardware,design automation,design flow,extra instructions,field programmable gate arrays,hardware-software codesign,hardware/software codesign,mixed FPGA/processor architectures,parametrised descriptions,program compilers,single-chip codesign,software architecture},
number = {c},
pages = {10},
publisher = {IEEE Comput. Soc},
title = {{Hardware/software codesign for FPGA-based systems}},
url = {http://ieeexplore.ieee.org/document/772879/},
volume = {3},
year = {1999}
}
@article{Casse2010,
abstract = {Typical constraints on embedded systems include code size limits, upper bounds on energy consumption and hard or soft deadlines. To meet these requirements, it may be necessary to improve the software by applying various kinds of transformations like compiler optimizations, specific mapping of code and data in the available memories, code compression, etc. However, a transformation that aims at improving the software with respect to a given criterion might engender side effects on other criteria and these effects must be carefully analyzed. For this purpose, we have developed a common framework that makes it possible to experiment various code transfor-mations and to evaluate their impact of various criteria. This work has been carried out within the French ANR MORE project.},
author = {Cass{\'{e}}, Hugues and Heydemann, Karine and Ozaktas, Haluk and Ponroy, Jonathan and Rochange, Christine and Zendra, Olivier},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cass{\'{e}} et al. - 2010 - A framework to experiment optimizations for real-time and embedded software.pdf:pdf},
keywords = {WCET,code size,energy consumption,optimization,real-time},
month = {may},
title = {{A framework to experiment optimizations for real-time and embedded software}},
url = {https://hal.inria.fr/inria-00539973},
year = {2010}
}
@article{CUSTARD2006,
abstract = {A multi-threaded microprocessor with a customisable instruction set, CUStomisable Threaded ARchitecture (CUSTARD), is proposed. CUSTARD features include design space exploration and a compiler for automatic selection of custom instructions. Custom instructions, optimised for a specific application, accelerate frequently performed computations by implement- ing them as dedicated hardware. Field programmable gate array implementations of CUSTARD are evaluated using media and cryptography benchmarks, and commercial MicroBlaze processor is compared. As low as 28{\%} area overhead for four interleaved threads and up to 355{\%} speedup over a processor without custom instructions are demonstrated.},
author = {Dimond, R. and Mencer, O. and Luk, W.},
doi = {10.1049/ip-cdt:20050177},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Dimond, Mencer, Luk - 2006 - Application-specific customisation of multi-threaded soft processors.pdf:pdf},
issn = {13502387},
journal = {Computers and Digital Techniques, IEE Proceedings},
number = {3},
pages = {173--180},
title = {{Application-specific customisation of multi-threaded soft processors}},
url = {http://digital-library.theiet.org/content/journals/10.1049/ip-cdt{\_}20050177},
volume = {153},
year = {2006}
}
@inproceedings{JoshuaJ.Yi,
author = {{Joshua J. Yi} and Kodakara, S.V. and Sendag, R. and Lilja, D.J. and Hawkins, D.M.},
booktitle = {11th International Symposium on High-Performance Computer Architecture},
doi = {10.1109/HPCA.2005.8},
isbn = {0-7695-2275-0},
pages = {266--277},
publisher = {IEEE},
title = {{Characterizing and Comparing Prevailing Simulation Techniques}},
url = {http://ieeexplore.ieee.org/document/1385950/}
}
@misc{,
title = {{SimPoint}},
url = {http://cseweb.ucsd.edu/{~}calder/simpoint/},
urldate = {2018-06-03}
}
@article{Sherwood2002,
abstract = {Understanding program behavior is at the foundation of computer architecture and program optimization. Many pro- grams have wildly different behavior on even the very largest of scales (over the complete execution of the program). This realization has ramifications for many architectural and com- piler techniques, from thread scheduling, to feedback directed optimizations, to the way programs are simulated. However, in order to take advantage of time-varying behavior, we must first develop the analytical tools necessary to automatically and efficiently analyze program behavior over large sections of execution. Our goal is to develop automatic techniques that are capable of finding and exploiting the Large Scale Behavior of programs (behavior seen over billions of instructions). The first step towards this goal is the development of a hardware independent metric that can concisely summarize the behav- ior of an arbitrary section of execution in a program. To this end we examine the use of Basic Block Vectors. We quantify the effectiveness of Basic Block Vectors in capturing program behavior across several different architectural metrics, explore the large scale behavior of several programs, and develop a set of algorithms based on clustering capable of an- alyzing this behavior. We then demonstrate an application of this technology to automatically determine where to simulate for a program to help guide computer architecture research.},
author = {Sherwood, Timothy and Perelman, Erez and Hamerly, Greg and Calder, Brad},
doi = {10.1145/635508.605403},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sherwood et al. - 2002 - Automatically characterizing large scale program behavior.pdf:pdf},
isbn = {1581135742},
issn = {01635980},
journal = {ACM SIGOPS Operating Systems Review},
number = {5},
pages = {45},
title = {{Automatically characterizing large scale program behavior}},
volume = {36},
year = {2002}
}
@inproceedings{Williams2009,
annote = {presentation},
author = {Williams, John},
booktitle = {CELF Embedded Linux Conference},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Williams - 2009 - Embedded Linux on FPGAs for fun and profit.pdf:pdf},
title = {{Embedded Linux on FPGAs for fun and profit}},
year = {2009}
}
@article{Cassea,
author = {Cass{\'{e}}, H and Heydemann, K and Ozaktas, H and Ponroy, J and Rochange, C and Zendra, O and Nancy, Inria and Est, Grand},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cass{\'{e}} et al. - Unknown - A framework to experiment optimizations for real-time and embedded software.pdf:pdf},
journal = {International Conference on Embedded Real Time Software and Systems},
keywords = {code size,energy consumption,optimization,real-,time,wcet},
number = {May 2010},
pages = {1--10},
title = {{A framework to experiment optimizations for real-time and embedded software}}
}
@phdthesis{Tong2007,
abstract = {Profiling tools are computer-aided design (CAD) tools th a t help in determining the computationally intensive portions in a software program. They are used by embed? ded system designers to choose computationally intensive functions of the software program for hardware implementation and acceleration. This thesis presents a de? tailed discussion of the various profiling tools available for embedded system design. In addition, a FPGA -BP tool, the Airwo lf Profiler, was developed and used to pro? file a set of software benchmarks. The accuracy of the profiled results was compared against a well-known software-based profiling tool, GNU's gprof. It is shown th a t A ir? wolf provides up to 66.2{\%} improvement in accuracy of profiled results and reduces the run time performance overhead, caused by software-based profiling tools, by up to 41.3{\%}. This helps embedded designers in choosing the computationally intensive functions for hardware acceleration},
author = {Tong, Jason G},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tong - 2007 - Software profiling for an FPGA-based CPU core.pdf:pdf},
isbn = {9780494349885},
pages = {73},
school = {University of Windsor, Canada},
title = {{Software profiling for an FPGA-based CPU core}},
year = {2007}
}
@misc{,
keywords = {OPS},
mendeley-tags = {OPS},
title = {{–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—â–∞—è —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–ª–∏–≤–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞}},
url = {www.ops.rsu.ru},
urldate = {2018-05-28},
year = {2018}
}
@article{Nane2016,
author = {Nane, Razvan and Sima, Vlad-Mihai and Pilato, Christian and Choi, Jongsok and Fort, Blair and Canis, Andrew and Chen, Yu Ting and Hsiao, Hsuan and Brown, Stephen and Ferrandi, Fabrizio},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nane et al. - 2016 - A survey and evaluation of fpga high-level synthesis tools.pdf:pdf},
issn = {0278-0070},
journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
number = {10},
pages = {1591--1604},
title = {{A survey and evaluation of fpga high-level synthesis tools}},
volume = {35},
year = {2016}
}
@article{Hayne2011,
author = {Hayne, Ronald J and Citadel, The and Hayne, Ronald J and Engi-, Computer},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hayne et al. - 2011 - AC 2011-5 AN INSTRUCTIONAL PROCESSOR DESIGN USING VHDL An Instructional Processor Design using VHDL and an FPGA.pdf:pdf},
pages = {95--101},
title = {{AC 2011-5 : AN INSTRUCTIONAL PROCESSOR DESIGN USING VHDL An Instructional Processor Design using VHDL and an FPGA}},
year = {2011}
}
@article{Good2005,
abstract = {Two new FPGA designs for the Advanced Encryption Standard (AES) are presented. The first is believed to be the fastest, achieving 25 Gbps throughput using a Xilinx Spartan-III (XC3S2000) device. The second is believed to be the smallest and fits into a Xilinx Spartan-II (XC2S15) device, only requiring two block memories and 124 slices to achieve a throughput of 2.2 Mbps. These designs show the extremes of what is possible and have radically different applications from high performance e-commerce IPsec servers to low power mobile and home applications. The high speed design presented here includes support for continued throughput during key changes for both encryption and decryption which previous pipelined designs have omitted.},
author = {Good, Tim and Benaissa, Mohammed},
doi = {10.1007/11545262_31},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Good, Benaissa - 2005 - AES on FPGA from the Fastest to the Smallest.pdf:pdf},
isbn = {978-3-540-28474-1},
issn = {03029743},
keywords = {advanced encryption standard,aes,application specific instruction processor,area,array,asip,design exploration,field programmable gate,finite field,fpga,high throughput,low,pipelined},
pages = {427--440},
title = {{AES on FPGA from the Fastest to the Smallest}},
url = {http://link.springer.com/10.1007/11545262{\_}31},
year = {2005}
}
@inproceedings{Jones:2005:FVP:1046192.1046207,
address = {New York, NY, USA},
author = {Jones, Alex K and Hoare, Raymond and Kusic, Dara and Fazekas, Joshua and Foster, John},
booktitle = {Proceedings of the 2005 ACM/SIGDA 13th International Symposium on Field-programmable Gate Arrays},
doi = {10.1145/1046192.1046207},
isbn = {1-59593-029-9},
keywords = {NIOS,VLIW,compiler,kernels,parallelism,synthesis},
pages = {107--117},
publisher = {ACM},
series = {FPGA '05},
title = {{An FPGA-based VLIW Processor with Custom Hardware Execution}},
url = {http://doi.acm.org/10.1145/1046192.1046207 https://www.semanticscholar.org/paper/An-FPGA-based-VLIW-processor-with-custom-hardware-Jones-Hoare/ea1f9beec7bde5d3b04e5611231536256e3303e2},
year = {2005}
}
@article{Cadambi,
author = {Cadambi, Srihari and Copen, Seth},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cadambi, Copen - Unknown - CPR A Confguration Profling Tool.pdf:pdf},
journal = {Architecture},
title = {{CPR : A Confguration Profling Tool}}
}
@inproceedings{Graham1982,
abstract = {Large complex programs are composed of many small routines that implement abstractions for the routines that call them. To be useful, an execution profiler must attribute execution time in a way that is significant for the logical structure of a program as well as for its textual decomposition. This data must then be displayed to the user in a convenient and informative way. The gprof profiler accounts for the running time of called routines in the running time of the routines that call them. The design and use of this profiler is described.},
author = {Graham, Susan L. and Kessler, Peter B. and Mckusick, Marshall K.},
booktitle = {ACM SIGPLAN Notices},
doi = {10.1145/872726.806987},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Graham, Kessler, Mckusick - 1982 - gprof a Call Graph Execution Profiler.pdf:pdf},
isbn = {0-89791-074-5},
issn = {03621340},
number = {6},
pages = {120--126},
title = {{gprof: a Call Graph Execution Profiler}},
url = {http://dl.acm.org/citation.cfm?id=806987{\%}5Cnhttp://portal.acm.org/citation.cfm?doid=872726.806987},
volume = {17},
year = {1982}
}
@article{Hadjis,
author = {Hadjis, Stefan and Canis, Andrew and Sobue, Ryoya and Hara-azumi, Yuko and Tomiyama, Hiroyuki and Anderson, Jason},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hadjis et al. - Unknown - Profiling-Driven Multi-Cycling in FPGA High-Level Synthesis.pdf:pdf},
title = {{Profiling-Driven Multi-Cycling in FPGA High-Level Synthesis}}
}
@article{Stewart2017,
abstract = {This paper proposes a new high-level approach for optimising field programmable gate array (FPGA) designs. FPGA designs are commonly implemented in low-level hardware description languages (HDLs), which lack the abstractions necessary for identifying opportunities for significant performance improvements. Using a computer vision case study, we show that modelling computation with dataflow abstractions enables substantial restructuring of FPGA designs before lowering to the HDL level, and also improve CPU performance. Using the CPU transformations, runtime is reduced by 43 {\%}. Using the FPGA transformations, clock frequency is increased from 67MHz to 110MHz. Our results outperform commercial low-level HDL optimisations, showcasing dataflow program abstraction as an amenable computation model for highly effective FPGA optimisation.},
author = {Stewart, Robert and Bhowmik, Deepayan and Wallace, Andrew and Michaelson, Greg},
doi = {10.1007/s11265-015-1044-y},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Stewart et al. - 2017 - Profile Guided Dataflow Transformation for FPGAs and CPUs.pdf:pdf},
issn = {19398115},
journal = {Journal of Signal Processing Systems},
keywords = {CPU,Dataflow,FPGA,Profiling,Transformations},
number = {1},
pages = {3--20},
title = {{Profile Guided Dataflow Transformation for FPGAs and CPUs}},
volume = {87},
year = {2017}
}
@article{Zhao2005,
author = {Zhao, Pen and Amaral, Jose Nelson},
doi = {10.1109/CAHPC.2005.26},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Zhao, Amaral - 2005 - Function Outlining and Partial Inlining.pdf:pdf},
isbn = {0-7695-2446-X},
issn = {1550-6533},
journal = {17th International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD'05)},
pages = {101--108},
title = {{Function Outlining and Partial Inlining}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=1592562{\%}5Cnhttp://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1592562},
year = {2005}
}
@misc{Grune1989,
author = {Grune, Dick and Huntjens, Matty},
booktitle = {Informatie},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Grune, Huntjens - 1989 - Het detecteren van kopieen bij informatica-practica.ps:ps},
number = {11},
pages = {864--867},
title = {{Het detecteren van kopieen bij informatica-practica}},
url = {https://dickgrune.com/Programs/similarity{\_}tester/},
volume = {31},
year = {1989}
}
@inproceedings{2017,
address = {–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫},
author = {–ë–∞–≥–ª–∏–π, –ê.–ü. and –î—É–±—Ä–æ–≤, –î.–í. and –®—Ç–µ–π–Ω–±–µ—Ä–≥, –ë.–Ø. and –®—Ç–µ–π–Ω–±–µ—Ä–≥, –†.–ë.},
booktitle = {–ù–∞—É—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: —Ç—Ä—É–¥—ã XIX –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–∞—É—á–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏},
doi = {10.20948/abrau-2017-53},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/–ë–∞–≥–ª–∏–π et al. - 2017 - –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö.pdf:pdf},
pages = {43--46},
publisher = {–ò–ü–ú –∏–º. –ú.–í.–ö–µ–ª–¥—ã—à–∞},
title = {{–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö}},
url = {http://keldysh.ru/abrau/2017/proc.pdf},
year = {2017}
}
@inproceedings{Serrano1997,
abstract = {Inline function expansion is an optimization that may improve program performance by removing calling sequences and enlarging the scope of other optimizations. Unfortunately it also has the drawback of enlarging programs. This might impair executable programs performance. In order to get rid of this annoying effect, we present, an easy to implement, inlining optimization that minimizes code size growth by combining a compile-time algorithm deciding when expansion should occur with different expansion frameworks describing how they should be performed. We present the experimental measures that have driven the design of inline function expansion. We conclude with measurements showing that our optimization succeeds in producing faster codes while avoiding code size increase.},
author = {Serrano, Manuel},
booktitle = {Programming Languages: Implementations, Logics, and Programs},
editor = {Glaser, Hugh and Hartel, Pieter and Kuchen, Herbert},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Serrano - 1997 - Inline expansion when and how.pdf:pdf},
keywords = {compilation,functional languages,inlining,optimization},
pages = {143--157},
publisher = {Springer Berlin Heidelberg},
title = {{Inline expansion: when and how?}},
url = {http://cuiwww.unige.ch/{~}serrano/},
year = {1997}
}
@inproceedings{2010,
address = {–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫},
author = {–ü–æ–ª—É—è–Ω, –°.–í.},
booktitle = {–ù–∞—É—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: —Å—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∑–∞–¥–∞—á–∏: –¢—Ä—É–¥—ã –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Å—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/–ü–æ–ª—É—è–Ω - 2010 - –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—â–µ–º —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞—Ç–µ–ª–µ.pdf:pdf},
isbn = {978-5-211-05916-0},
keywords = {–æ—Ä—Å,–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ},
mendeley-tags = {–æ—Ä—Å,–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ},
pages = {652--653},
publisher = {–ò–∑–¥-–≤–æ –ú–ì–£},
title = {{–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—â–µ–º —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞—Ç–µ–ª–µ}},
url = {http://agora.guru.ru/display.php?conf=abrau2010},
year = {2010}
}
@article{Dubey2015,
author = {Dubey, Anuj and Mishra, Ashish and Bhutada, Shrikant},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Dubey, Mishra, Bhutada - 2015 - Comparative Study of CH Stone Benchmarks on Xilinx Vivado High Level Synthesis Tool.pdf:pdf},
keywords = {"ijert",---high level synthesis,chstone benchmarks,hls,vivado and,xilinx},
number = {01},
pages = {237--242},
title = {{Comparative Study of CH Stone Benchmarks on Xilinx Vivado High Level Synthesis Tool}},
volume = {4},
year = {2015}
}
@article{Zhou2018,
abstract = {Modern high-level synthesis (HLS) tools greatly reduce the turn-around time of designing and implementing complex FPGA-based accelerators. They also expose various optimization opportunities, which cannot be easily explored at the register-transfer level. With the increasing adoption of the HLS design methodology and con-tinued advances of synthesis optimization, there is a growing need for realistic benchmarks to (1) facilitate comparisons between tools, (2) evaluate and stress-test new synthesis techniques, and (3) estab-lish meaningful performance baselines to track progress of the HLS technology. While several HLS benchmark suites already exist, they are primarily comprised of small textbook-style function kernels, instead of complete and complex applications. To address this limita-tion, we introduce Rosetta, a realistic benchmark suite for software programmable FPGAs. Designs in Rosetta are fully-developed appli-cations. They are associated with realistic performance constraints, and optimized with advanced features of modern HLS tools. We be-lieve that Rosetta is not only useful for the HLS research community, but can also serve as a set of design tutorials for non-expert HLS users. In this paper we describe the characteristics of our bench-marks and the optimization techniques applied to them. We further report experimental results on an embedded FPGA device as well as a cloud FPGA platform.},
author = {Zhou, Yuan and Gupta, Udit and Dai, Steve and Zhao, Ritchie and Srivastava, Nitish and Jin, Hanchen and Featherston, Joseph and Lai, Yi-Hsiang and Liu, Gai and {Angarita Velasquez}, Gustavo and Wang, Wenping and Zhang, Zhiru},
doi = {10.1145/3174243.3174255},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Zhou et al. - 2018 - Rosetta A Realistic High-Level Synthesis Benchmark Suite for Software Programmable FPGAs.pdf:pdf},
isbn = {9781450356145},
pages = {269--278},
title = {{Rosetta: A Realistic High-Level Synthesis Benchmark Suite for Software Programmable FPGAs}},
url = {https://doi.org/10.1145/3174243.3174255},
year = {2018}
}
@article{Loki2004,
author = {L{\'{o}}ki, G{\'{a}}bor and Kiss, {\'{A}}kos and J{\'{a}}sz, Judit and Besz{\'{e}}des, {\'{A}}rp{\'{a}}d},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/L{\'{o}}ki et al. - 2004 - Code Factoring in GCC.pdf:pdf},
journal = {Proceedings of the 2004 GCC Developers' Summit},
number = {June},
title = {{Code Factoring in GCC}},
url = {https://www.gnu.org/software/gcc/projects/cfo.html},
year = {2004}
}
@inproceedings{Steinberg2016,
abstract = {In the following work, a project for compiler that maps program loops onto a processor with programmable accelerator is presented. The processor with programmable architecture could be a system on a chip containing regular computational cores as well as a programmable circuit. A classification of loops according to information dependencies is suggested. For each loop class, the possibility and method for automatic organization of hardware support with an FPGA are examined. The compiler under study differs from the regular ones for the presence of a converter from C to the hardware description language as well as a driver library for data transfer between a CPU and accelerator.},
author = {Steinberg, Boris Ya and Bugliy, Anton P. and Dubrov, Denis V. and Mikhailuts, Yury V. and Steinberg, Oleg B. and Steinberg, Roman B.},
booktitle = {Procedia Computer Science},
doi = {10.1016/j.procs.2016.11.050},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Steinberg et al. - 2016 - A Project of Compiler for a Processor with Programmable Accelerator.pdf:pdf},
issn = {18770509},
keywords = {FPGA,HDL,high-level internal representation,high-level synthesis,parallelizing compiler,pipeline computations,reconfigurable architecture},
month = {jan},
pages = {435--438},
publisher = {Elsevier},
title = {{A Project of Compiler for a Processor with Programmable Accelerator}},
url = {https://www.sciencedirect.com/science/article/pii/S1877050916327193},
volume = {101},
year = {2016}
}
@article{Tripp2007,
abstract = {Unlocking the potential of field-programmable gate arrays requires compilers that translate algorithmic high-level language code into hardware circuits. The Trident open source compiler translates C code to a hardware circuit description, providing designers with extreme flexibility in prototyping reconfigurable supercomputers},
author = {Tripp, Justin L. and Gokhale, Maya B. and Peterson, Kristopher D.},
doi = {10.1109/MC.2007.107},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tripp, Gokhale, Peterson - 2007 - Trident From high-level language to hardware circuitry.pdf:pdf;:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tripp, Gokhale, Peterson - 2007 - Trident From high-level language to hardware circuitry(2).pdf:pdf},
isbn = {0018-9162},
issn = {00189162},
journal = {Computer},
keywords = {FPGAs,Handel-C,Impulse C,Mitrion-C,RC Toolbox,Reconfigurable computing,SRC Carte,Supercomputing,Trident compiler},
number = {3},
pages = {28--37},
title = {{Trident: From high-level language to hardware circuitry}},
volume = {40},
year = {2007}
}
@article{Goel2018,
abstract = {High-performance dynamic language implementations make heavy use of speculative optimizations to achieve speeds close to statically compiled languages. These optimizations are typically performed by a just-in-time compiler that generates code under a set of assumptions about the state of the program and its environment. In certain cases, a program may execute code compiled under assumptions that are no longer valid. The implementation must then deoptimize the program on-the-fly; this entails finding semantically equivalent code that does not rely on invalid assumptions, translating program state to that expected by the target code, and transferring control. This paper looks at the interaction between optimization and deoptimization, and shows that reasoning about speculation is surprisingly easy when assumptions are made explicit in the program representation. This insight is demonstrated on a compiler intermediate representation, named sourir, modeled after the high-level representation for a dynamic language. Traditional compiler optimizations such as constant folding, unreachable code elimination, and function inlining are shown to be correct in the presence of assumptions. Furthermore, the paper establishes the correctness of compiler transformations specific to deoptimization: namely unrestricted deoptimization, predicate hoisting, and assume composition.},
author = {Goel, Aviral and Ahmed, Amal and Vitek, J A N},
doi = {10.1145/3158137},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Goel, Ahmed, Vitek - 2018 - Correctness of Speculative Optimizations with Dynamic Deoptimization.pdf:pdf},
journal = {Proc. ACM Program. Lang.},
number = {POPL},
title = {{Correctness of Speculative Optimizations with Dynamic Deoptimization}},
url = {https://arxiv.org/abs/1711.03050{\%}0Ahttps://dl.acm.org/citation.cfm?doid=3177123.3158137},
volume = {2},
year = {2018}
}
@phdthesis{MaFeiTreePatternMatching,
abstract = {Solving Tree Pattern Query problem is the central part of XML database query. This thesis presents several new algorithms to solve Tree Pattern Query problem and its variations. All of them have better time complexity than any existing algorithms. This thesis also describes the design, implementation, and application of two new algorithms to detect cloned code. The algorithms operate on the abstract syntax trees formed by many compilers as an intermediate representation. They extend prior work by identifying clones even when arbitrary subtrees have been changed. On a 440,000-line code corpus, 20- 50{\%} of the clones found eluded previous methods.},
author = {Ma, Fei},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ma - 2004 - On the Study of Tree Pattern Matching Algorithms and Applications.pdf:pdf},
school = {University Of British Columbia},
title = {{On the Study of Tree Pattern Matching Algorithms and Applications}},
url = {https://www.cs.ubc.ca/grads/resources/thesis/Nov06/Ma{\_}Fei.pdf},
year = {2004}
}
@inproceedings{UlmerFPUReuseFPGA,
author = {Ulmer, Craig and Javelo, Adrian},
booktitle = {ERSA},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ulmer, Javelo - 2006 - Floating-Point Unit Reuse in an FPGA Implementation of a Ray-Triangle Intersection Algorithm.pdf:pdf},
keywords = {floating-point reuse,fpga},
title = {{Floating-Point Unit Reuse in an FPGA Implementation of a Ray-Triangle Intersection Algorithm}},
year = {2006}
}
@article{Lopes2017a,
abstract = {Previous studies have shown that there is a non-trivial amount of duplication in source code. This paper analyzes a corpus of 4.5 million non-fork projects hosted on GitHub representing over 428 million files written in Java, C++, Python, and JavaScript. We found that this corpus has a mere 85 million unique files. In other words, 70{\%} of the code on GitHub consists of clones of previously created files. There is considerable variation between language ecosystems. JavaScript has the highest rate of file duplication, only 6{\%} of the files are distinct. Java, on the other hand, has the least duplication, 60{\%} of files are distinct. Lastly, a project-level analysis shows that between 9{\%} and 31{\%} of the projects contain at least 80{\%} of files that can be found elsewhere. These rates of duplication have implications for systems built on open source software as well as for researchers interested in analyzing large code bases. As a concrete artifact of this study, we have created D{\'{e}}j{\`{a}}Vu, a publicly available map of code duplicates in GitHub repositories.},
author = {Lopes, Cristina V. and Maj, Petr and Martins, Pedro and Saini, Vaibhav and Yang, Di and Zitny, Jakub and Sajnani, Hitesh and Vitek, Jan},
doi = {10.1145/3133908},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Lopes et al. - 2017 - D{\'{e}}j{\`{a}}Vu a map of code duplicates on GitHub.pdf:pdf},
issn = {24751421},
journal = {Proceedings of the ACM on Programming Languages},
keywords = {Clone Detection, Source Code Analysis},
number = {OOPSLA},
pages = {1--28},
title = {{D{\'{e}}j{\`{a}}Vu: a map of code duplicates on GitHub}},
url = {http://dl.acm.org/citation.cfm?doid=3152284.3133908},
volume = {1},
year = {2017}
}
@phdthesis{FlouriPatternMatching2012,
author = {Flouri, Tomas},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Flouri - 2012 - Pattern matching in tree structures.pdf:pdf},
pages = {155},
school = {Czech Technical University},
title = {{Pattern matching in tree structures}},
year = {2012}
}
@article{Wong2009,
author = {Wong, Stephan and Anjam, Fakhar},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wong, Anjam - 2009 - The Delft Reconfigurable VLIW Processor.pdf:pdf},
journal = {System},
keywords = {fpga,ilp,reconfigurable computing,softcore},
pages = {3},
title = {{The Delft Reconfigurable VLIW Processor}},
volume = {1},
year = {2009}
}
@article{Esko2010,
abstract = {A popular way to exploit high level programming languages in FPGA designs is to use a soft-core with accompanying software development tools. However, a common shortcoming with the current soft-core offerings is their limited software execution capability: the required performance for the implementation can be often reached only with instruction set extensions. In this paper, we propose and evaluate an application-specific processor design toolset that uses a multi-issue exposed data path processor architecture template. The main benefit of the architecture is scalability with respect to instruction-level parallelism (ILP). The design flow allows the designer to freely customize the data path resources in the core to exploit the ILP available in computation intensive kernels. The design toolset includes a retargetable C compiler and an architecture simulator, making design space exploration feasible. The experiments show that a relatively small soft-core tailored with the toolset provides significant speedups on software execution without using any instruction set extensions. The best measured speedup in comparison to the major commercial soft-cores was fourfold in applications from the CHStone benchmark suite, while the amount of consumed FPGA resources remained moderate.},
author = {Esko, Otto and J{\"{a}}{\"{a}}skel{\"{a}}inen, Pekka and Huerta, Pablo and {De La Lama}, Carlos S. and Takala, Jarmo and Martinez, Jose Ignacio},
doi = {10.1109/FPL.2010.51},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Esko et al. - 2010 - Customized exposed datapath soft-core design flow with compiler support.pdf:pdf},
isbn = {9780769541792},
issn = {1946-1488},
journal = {Proceedings - 2010 International Conference on Field Programmable Logic and Applications, FPL 2010},
pages = {217--222},
title = {{Customized exposed datapath soft-core design flow with compiler support}},
year = {2010}
}
@article{Hara2009,
author = {Hara, Yuko and Tomiyama, Hiroyuki and Honda, Shinya and Takada, Hiroaki},
doi = {10.2197/ipsjjip.17.242},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hara et al. - 2009 - Proposal and Quantitative Analysis of the CHStone Benchmark Program Suite for Practical C-based High-level Synthesi.pdf:pdf},
issn = {1882-6652},
journal = {Journal of Information Processing},
pages = {242--254},
title = {{Proposal and Quantitative Analysis of the CHStone Benchmark Program Suite for Practical C-based High-level Synthesis}},
url = {http://joi.jlc.jst.go.jp/JST.JSTAGE/ipsjjip/17.242?from=CrossRef},
volume = {17},
year = {2009}
}
@article{Anjam2010,
abstract = {In this paper, we present a very long instruction word (VLIW) softcore processor implemented in an FPGA. The processor instruction set architecture (ISA) is based on the VEX ISA. The issue-width of the processor can be dynamically adjusted. The processor has two 2-issue cores, which can be run independently. If not in use, each core can be taken to a lower power mode by gating off the source clock. The two 2-issue cores can be combined at run-time to form one larger 4-issue core. Applications/kernels with larger instruction level parallelism (ILP), such as matrix multiplication, FFT, DFT, etc., can be run on the larger 4-issue core to exploit the available ILP. Applications with more data level parallelism (DLP), such as AES encryption/decryption, ADPCM encode/decode etc., can be run on the two 2-issue cores with the data divided among the two cores. We utilize the Xilinx partial reconfiguration flow to implement our design. The size of the partial bitstreams to combine the two 2-issue cores to one 4-issue core or split vice versa is 59 kbytes. The minimum time required to reconfigure the processor or adjust the issue-slots are 0.893 ms and 0.148 ms for the Xilinx Virtex-II Pro and Virtex-4 FPGAs, respectively.},
author = {Anjam, Fakhar and Nadeem, Muhammad and Wong, Stephan},
doi = {10.1109/FPT.2010.5681444},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Anjam, Nadeem, Wong - 2010 - A VLIW softcore processor with dynamically adjustable issue-slots.pdf:pdf},
isbn = {9781424489817},
journal = {Proceedings - 2010 International Conference on Field-Programmable Technology, FPT'10},
pages = {393--398},
title = {{A VLIW softcore processor with dynamically adjustable issue-slots}},
year = {2010}
}
@article{Schleimer2003,
abstract = {Digital content is for copying: quotation, revision, plagiarism, and file sharing all create copies. Document fingerprinting is concerned with accurately identifying copying, including small partial copies, within large sets of documents.We introduce the class of local document fingerprinting algorithms, which seems to capture an essential property of any finger-printing technique guaranteed to detect copies. We prove a novel lower bound on the performance of any local algorithm. We also develop winnowing, an efficient local fingerprinting algorithm, and show that winnowing's performance is within 33{\%} of the lower bound. Finally, we also give experimental results on Web data, and report experience with MOSS, a widely-used plagiarism detection service.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Schleimer, Saul and Wilkerson, Daniel S. and Aiken, Alex},
doi = {10.1145/872757.872770},
eprint = {arXiv:1011.1669v3},
file = {:C$\backslash$:/Users/czen/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Schleimer, Wilkerson, Aiken - 2003 - Winnowing Local Algorithms for Document Fingerprinting.pdf:pdf},
isbn = {158113634X},
issn = {10466673},
journal = {Proceedings of the 2003 ACM SIGMOD international conference on on Management of data - SIGMOD '03},
pages = {76--85},
pmid = {24030996},
title = {{Winnowing: Local Algorithms for Document Fingerprinting}},
url = {http://portal.acm.org/citation.cfm?doid=872757.872770},
year = {2003}
}
